%This script will generate continuous signal inputs to be used by Parris'
%bhangmeter box.  The LED light coming from the box will then be focused
%onto the EBS cameras.

%This program is written for the cadets to use.  The only input the cadets
%need to make is to set the directory paths for where they want to store
%the plots and data files generated by this program.

dbstop if error;
close all
clc
clear vars

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%% Change these values only!!!!  %%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Create a string holding the path to where you want to place the output
%folders.
saveDataPath = "C:\Users\DF_Local\Bhangmeter\Data\";
savePlotPath = "C:\Users\DF_Local\Bhangmeter\Plots\";

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Create a variable that holds the sample rate for the digitizer. 
sampleRate = 10000.0;

%Generate an information structure.
info = generateBhangInfoStructure(saveDataPath, savePlotPath, sampleRate);

%Create the data acquisition session.      
bangDAQ.s = daq('ni');
bangDAQ.Rate = sampleRate; 

%Add channels to the session.
bangDAQ.dev = 'Dev1';

inputChannelOneID = 'ai0';
measurementType = 'Voltage';

%Create the output channel.
bangDAQ.outputChannelOne = addoutput(bangDAQ.s, bangDAQ.dev, 'ao0', ...
    'Voltage');                                  

%Add input(to the NIDAQ box-i.e. input from instrument, not computer.)
%channel one. 
bangDAQ.inputChannelOne = addinput(bangDAQ.s, bangDAQ.dev, ...
    inputChannelOneID, measurementType); 
bangDAQ.inputChannelOne.TerminalConfig = 'SingleEnded';

%Now call the gui functions.
handles = getBangHandles(bangDAQ, info);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function info = generateBhangInfoStructure(saveDataPath, savePlotPath, ...
    sampleRate)
%This function will generate the info structure for the bhangmeter program.

info.saveDataPath = saveDataPath;
info.savePlotPath = savePlotPath;
info.sampleRate = sampleRate;

%Set up the parameters.
saveData = 1;
savePlot = 1;
info.saveData = saveData;
info.savePlot = savePlot;

%Set up some initial square wave values.
squareAmp = 2.5;
squareFrequency = sampleRate;
squareOffset = 0.0;
info.squareAmp = squareAmp;
info.squareFrequency = squareFrequency;
info.squareOffset = squareOffset;

%Set up some initial sine wave values.
sineAmp = 2.5;
sineFrequency = sampleRate;
sineOffset = 0.0;
info.sineAmp = sineAmp;
info.sineFrequency = sineFrequency;
info.sineOffset = sineOffset;

%Set up some initial sawtooth wave values.
sawtoothAmp = 2.5;
sawtoothFrequency = sampleRate;
sawtoothOffset = 0.0;
info.sawtoothAmp = sawtoothAmp;
info.sawtoothFrequency = sawtoothFrequency;
info.sawtoothOffset = sawtoothOffset;

%Set up some initial pulse pair values.
pulsePairAmp1 = 2.5;
pulsePairOffset1 = 0.001;
pulsePairSigma1 = 100.0;
pulsePairMu1 = 1000;
pulsePairAmp2 = 1.5;
pulsePairOffset2 = 0.002;
pulsePairSigma2 = 90.0;
pulsePairMu2 = 2000;
info.pulsePairAmp1 = pulsePairAmp1;
info.pulsePairOffset1 = pulsePairOffset1;
info.pulsePairSigma1 = pulsePairSigma1;
info.pulsePairMu1 = pulsePairMu1;
info.pulsePairAmp2 = pulsePairAmp2;
info.pulsePairOffset2 = pulsePairOffset2;
info.pulsePairSigma2 = pulsePairSigma2;
info.pulsePairMu2 = pulsePairMu2;

%Lets set the start and stop flag.
startFlag = 1;
stopFlag = 0;
info.startFlag = startFlag;
info.stopFlag = stopFlag;

%Set the save data and save plots flags.
saveDataFlag = 1;
savePlotFlag = 1;
info.saveDataFlag = saveDataFlag;
info.savePlotFlag = savePlotFlag;

params = zeros(21, 1);

params(1) = sineAmp;
params(2) = sineFrequency;
params(3) = sineOffset;
params(4) = squareAmp;
params(5) = squareFrequency;
params(6) = squareOffset;
params(7) = sawtoothAmp;
params(8) = sawtoothFrequency;
params(9) = sawtoothOffset;
params(10) = pulsePairAmp1;
params(11) = pulsePairOffset1;
params(12) = pulsePairSigma1;
params(13) = pulsePairMu1;
params(14) = pulsePairAmp2;
params(15) = pulsePairOffset2;
params(16) = pulsePairSigma2;
params(17) = pulsePairMu2;
params(18) = startFlag;
params(19) = stopFlag;
params(20) = saveDataFlag;
params(21) = savePlotFlag;

info.params = params;

%Set up some common frame parameter values.
info.titlePosition = 'centertop';
info.borderWidth = 2;
info.fontWeight = 'bold';
info.fontSize = 15;

%Set the row heights and column widths for the wave frames.
waveRowHeight = {50, 50, 50, 50, 50, 50, 50, 50};
waveColumnWidth = {130, 20, 80};
info.waveRowHeight = waveRowHeight;
info.waveColumnWidth = waveColumnWidth;

%Set the row heights and column widths for the pairs frame.
pairsRowHeight = {35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35};
pairsColumnWidth = {30, 170, 20, 150, 30};
info.pairsRowHeight = pairsRowHeight;
info.pairsColumnWidth = pairsColumnWidth;

%Set up the parent gui location.  These values are in pixels from the lower
%left corner of the computer screen.
parentLeft  = 20;
parentBottom = 60;
parentWidth = 1280;
parentHeight = 605;

info.parentLeft = parentLeft;
info.parentBottom = parentBottom;
info.parentWidth = parentWidth;
info.parentHeight = parentHeight;

%Set up the plot window location for all the different plots.
plotLeft = 400;
plotBottom = 50;
plotWidth = 870;
plotHeight = 450;
info.plotLeft = plotLeft;
info.plotBottom = plotBottom;
info.plotWidth = plotWidth;
info.plotHeight = plotHeight;

%Set the location of the square wave panel into the original gui.
squarePanelLeft = 720;   %The left edge of the panel.
squarePanelBottom = 62;  %The bottom edge of the panel.
squarePanelWidth = 280;  %The width of the panel.
squarePanelHeight = 535; %The height of the panel.
info.squarePanelLeft = squarePanelLeft;
info.squarePanelBottom = squarePanelBottom;
info.squarePanelWidth = squarePanelWidth;
info.squarePanelHeight = squarePanelHeight;

%Set the location of the sawtooth wave panel into the original grid.
sawtoothPanelLeft = 1000;  %The left edge of the panel.
sawtoothPanelBottom = 62;  %The bottom of the panel.
sawtoothPanelWidth = 280;  %The width of the panel.
sawtoothPanelHeight = 535; %The height of the panel.
info.sawtoothPanelLeft = sawtoothPanelLeft;
info.sawtoothPanelBottom = sawtoothPanelBottom;
info.sawtoothPanelWidth = sawtoothPanelWidth;
info.sawtoothPanelHeight = sawtoothPanelHeight;

%Set up the location of the sine wave panel into the original gui.
sinePanelLeft = 440;   %The left edge of the panel.
sinePanelBottom = 62;  %The bottom edge of the panel.
sinePanelWidth = 280;  %The width of the panel.
sinePanelHeight = 535; %The height of the panel.
info.sinePanelLeft = sinePanelLeft;
info.sinePanelBottom = sinePanelBottom;
info.sinePanelWidth = sinePanelWidth;
info.sinePanelHeight = sinePanelHeight;

%Set up the location of the pulse pairs panel into the original gui.
pulsePairsPanelLeft = 0;  %The left edge of the panel.
pulsePairsPanelBottom = 62; %The bottom edge of the panel.
pulsePairsPanelWidth = 440;  %The width of the panel.
pulsePairsPanelHeight = 535;   %The height of the panel.
info.pulsePairsPanelLeft = pulsePairsPanelLeft;
info.pulsePairsPanelBottom = pulsePairsPanelBottom;
info.pulsePairsPanelWidth = pulsePairsPanelWidth;
info.pulsePairsPanelHeight = pulsePairsPanelHeight;

end  %End of the function generateBhangInfoStructure.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function handles = getBangHandles(bangDAQ, info)
%This function sets up the Bhangmeter GUI.  It is called by Bhangmeter.m
%bangDAQ is the data acquisition handle needed for the interface between
%the computer and the electronics box created by Parris.

%Set up a handle structure.
handles = struct;

%Set up a parent gui for the program.
fig = uifigure;

%Give it a name.
fig.Name = 'BangMeter';

%Give it a position.
left = info.parentLeft;
bottom = info.parentBottom;
width = info.parentWidth;
height = info.parentHeight;

fig.Position = [left bottom width height];

%Now put the parameters into the handle structure.
handles.params = info.params;

%Here we set up the various panels.  These need the original parent gui
%handle.
handles.pulsePairs = getPulsePairs(handles, fig, bangDAQ, info);
handles.sineWave = getSineWave(handles, fig, bangDAQ, info);
handles.squareWave = getSquareWave(handles, fig, bangDAQ, info);
handles.sawtoothWave = getSawtoothWave(handles, fig, bangDAQ, info);
handles.utilities = getUtilities(fig, bangDAQ);

%Store the handle structure in the application data of the figure object.
guidata(fig, handles);

end  %End of the function getBangHandles.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function pulsePairs = getPulsePairs(handles, fig, bangDAQ, info)
%This function will generate a panel for the user to create a pair of
%pulses to send to the led light.

%Set up some initial pulse pair values.
amplitude1 = handles.params(10);
offset1 = handles.params(11);
sigma1 = handles.params(12);
mu1 = handles.params(13);

amplitude2 = handles.params(14);
offset2 = handles.params(15);
sigma2 = handles.params(16);
mu2 = handles.params(17);

%Set a panel into the original gui.
pulsePairs = uipanel(fig);

%Get the frame coordinates.
left = info.pulsePairsPanelLeft;
bottom = info.pulsePairsPanelBottom;
width = info.pulsePairsPanelWidth;
height = info.pulsePairsPanelHeight;
pulsePairs.Position = [left, bottom, width, height];

%Now set up the grid layout.
gridLayout = uigridlayout(pulsePairs, [length(info.pairsRowHeight) ...
    length(info.pairsColumnWidth)]);
gridLayout.RowHeight = info.pairsRowHeight;
gridLayout.ColumnWidth = info.pairsColumnWidth;

%Set the title and its position, the fonts and the border width.
pulsePairs.TitlePosition = 'centertop';
pulsePairs.Title = 'Pulse Pairs';
pulsePairs.BorderWidth = 2;
pulsePairs.FontWeight = 'bold';
pulsePairs.FontSize = 15;

%Set up a first peak amplitude label.
label = 'Peak 1 Amplitude(V) :';
row = 1;
column = 2;
getBangParamLabel(gridLayout, label, row, column);

%Get the peak 1 amplitude.
row = 1;
column = 4;
position = 10;
getBangParam(gridLayout, amplitude1, row, column, position);

%Set up a first peak offset label.
label = 'Peak 1 Offset (V) :';
row = 2;
column = 2;
getBangParamLabel(gridLayout, label, row, column);

%Get the first peak offset.
row = 2;
column = 4;
position = 11;
getBangParam(gridLayout, offset1, row, column, position);

%Set up a first peak sigma label.
label = 'Peak 1 Sigma : ';
row = 3;
column = 2;
getBangParamLabel(gridLayout, label, row, column);

%Get the first peak sigma.
row = 3;
column = 4;
position = 12;
getBangParam(gridLayout, sigma1, row, column, position);

%Set up a first peak mu label.
label = 'Peak 1 Mu : ';
row = 4;
column = 2;
getBangParamLabel(gridLayout, label, row, column);

%Get the first peak mu.
row = 4;
column = 4;
position = 13;
getBangParam(gridLayout, mu1, row, column, position);

%Set up a second peak amplitude label.
label = 'Peak 2 Amplitude(V) :';
row = 5;
column = 2;
getBangParamLabel(gridLayout, label, row, column);

%Get the peak 2 amplitude.
row = 5;
column = 4;
position = 14;
getBangParam(gridLayout, amplitude2, row, column, position);

%Set up a second peak offset label.
label = 'Peak 2 Offset (V) :';
row = 6;
column = 2;
getBangParamLabel(gridLayout, label, row, column);

%Get the second peak offset.
row = 6;
column = 4;
position = 15;
getBangParam(gridLayout, offset2, row, column, position);

%Set up a second peak sigma label.
label = 'Peak 2 Sigma : ';
row = 7;
column = 2;
getBangParamLabel(gridLayout, label, row, column);

%Get the second peak sigma.
row = 7;
column = 4;
position = 16;
getBangParam(gridLayout, sigma2, row, column, position);

%Set up a second peak mu label.
label = 'Peak 2 Mu : ';
row = 8;
column = 2;
getBangParamLabel(gridLayout, label, row, column);

%Get the second peak mu.
row = 8;
column = 4;
position = 17;
getBangParam(gridLayout, mu2, row, column, position);

%Generate the save data button component.
label = "Do Not Save Data To File?";
row = 9;
column = [2 5];
position = 20;
saveDataButton(gridLayout, label, row, column, position);

%Generate the save plot component.
label = "Do Not Save Plot To File?";
row = 10;
column = [2 5];
position = 21;
savePlotButton(gridLayout, label, row, column, position);

%Set up a second peak end time label.
label = 'Start';
row = 11;
column = 2;
position = 18;
frameType = 'pulsePair';
getStartButton(gridLayout, label, row, column, bangDAQ, info, ...
    position, frameType);

%Set up a stop button.
label = 'Stop';
row = 11;
column = 4;
position = 19;
getStopButton(fig, gridLayout, label, row, column, position);

end  %End of the function getPulsePairs.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function sineWave = getSineWave(handles, fig, bangDAQ, info)
%This function will generate a panel for the user to create a sine wave
%to send to the led light.
%This function is called by getBangHandles.m

%Lets get the sine wave parameters.
amplitude = handles.params(1);
frequency = handles.params(2);
offset = handles.params(3);

%Set a panel into the original gui.
sineWave = uipanel(fig);

%Get the frame coordinates.
left = info.sinePanelLeft;
bottom = info.sinePanelBottom;
width = info.sinePanelWidth;
height = info.sinePanelHeight;
sineWave.Position = [left bottom width height];

%Now set up the grid layout.
gridLayout = uigridlayout(sineWave, [length(info.waveRowHeight) ...
    length(info.waveColumnWidth)]);
gridLayout.RowHeight = info.waveRowHeight;
gridLayout.ColumnWidth = info.waveColumnWidth;
sineWave.TitlePosition = info.titlePosition;
sineWave.Title = 'Sine Wave';
sineWave.BorderWidth = info.borderWidth;
sineWave.FontWeight = info.fontWeight;
sineWave.FontSize = info.fontSize;

%Set up an amplitude label.
label = 'Amplitude(V) :';
row = 1;
column = 1;
getBangParamLabel(gridLayout, label, row, column);

%Get the amplitude.
row = 1;
column = 3;
position = 1;
getBangParam(gridLayout, amplitude, row, column, position);

%Set up a frequency label.
label = 'Frequency(Hz) : ';
row = 2;
column = 1;
getBangParamLabel(gridLayout, label, row, column);

%Get the frequency.
row = 2;
column = 3;
position = 2;
getBangParam(gridLayout, frequency, row, column, position);

%Set up a offset label.
label = 'Offset (V) : ';
row = 3;
column = 1;
getBangParamLabel(gridLayout, label, row, column);

%Get the offset.
row = 3;
column = 3;
position = 3;
getBangParam(gridLayout, offset, row, column, position);

%Generate the save data button component.
label = "Do Not Save Data To File?";
row = 4;
column = [1 3];
position = 20;
saveDataButton(gridLayout, label, row, column, position);
 
%Generate the save plot component.
label = "Do Not Save Plot To File?";
row = 5;
column = [1 3];
position = 21;
savePlotButton(gridLayout, label, row, column, position);

%Set up a start button.
label = 'Start';
row = 6;
column = [1 3];
position = 18;
frameType = 'Sine';
getStartButton(gridLayout, label, row, column, bangDAQ, info, ...
    position, frameType);

%Set up a stop button.
label = 'Stop';
row = 7;
column = [1 3];
position = 19;
getStopButton(fig, gridLayout, label, row, column, position);

end  %End of the function getSineWave.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function squareWave = getSquareWave(handles, fig, bangDAQ, info)
%This function will generate a panel for the user to create a square wave
%to send to the led light.
%This function is called by getBangHandles.m

%Lets get the square wave parameters.
amplitude = handles.params(4);
frequency = handles.params(5);
offset = handles.params(6);

%Set a panel into the original gui.
squareWave = uipanel(fig);

%Get the frame coordinates.
left = info.squarePanelLeft;
bottom = info.squarePanelBottom;
width = info.squarePanelWidth;
height = info.squarePanelHeight;
squareWave.Position = [left bottom width height];

%Now set up the grid layout.
gridLayout = uigridlayout(squareWave, [length(info.waveRowHeight) ...
    length(info.waveColumnWidth)]);
gridLayout.RowHeight = info.waveRowHeight;
gridLayout.ColumnWidth = info.waveColumnWidth;
squareWave.TitlePosition = info.titlePosition;
squareWave.Title = 'Square Wave';
squareWave.BorderWidth = info.borderWidth;
squareWave.FontWeight = info.fontWeight;
squareWave.FontSize = info.fontSize;

%Set up an amplitude label.
label = 'Amplitude(V) :';
row = 1;
column = 1;
getBangParamLabel(gridLayout, label, row, column);

%Get the amplitude.
row = 1;
column = 3;
position = 4;
getBangParam(gridLayout, amplitude, row, column, position);

%Set up a frequency label.
label = 'Frequency(Hz) : ';
row = 2;
column = 1;
getBangParamLabel(gridLayout, label, row, column);

%Get the frequency.
row = 2;
column = 3;
position = 5;
getBangParam(gridLayout, frequency, row, column, position);

%Set up a offset label.
label = 'Offset (V) : ';
row = 3;
column = 1;
getBangParamLabel(gridLayout, label, row, column);

%Get the offset.
row = 3;
column = 3;
position = 6;
getBangParam(gridLayout, offset, row, column, position);

%Generate the save data button component.
label = "Do Not Save Data To File?";
row = 4;
column = [1 3];
position = 20;
saveDataButton(gridLayout, label, row, column, position);
 
%Generate the save plot component.
label = "Do Not Save Plot To File?";
row = 5;
column = [1 3];
position = 21;
savePlotButton(gridLayout, label, row, column, position);

%Set up a start button.
label = 'Start';
row = 6;
column = [1 3];
position = 18;
frameType = 'Square';
getStartButton(gridLayout, label, row, column, bangDAQ, info, ...
    position, frameType);

%Set up a stop button.
label = 'Stop';
row = 7;
column = [1 3];
position = 19;
getStopButton(fig, gridLayout, label, row, column, position);

end  %End of the function getSquareWave.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function sawtoothWave = getSawtoothWave(handles, fig, bangDAQ, info)
%This function will generate a panel for the user to create a sawtooth wave
%to send to the led light.
%This function is called by getBangHandles.m

%Lets get the square wave parameters.
amplitude = handles.params(7);
frequency = handles.params(8);
offset = handles.params(9);

%Set a panel into the original grid.
sawtoothWave = uipanel(fig);

%Get the frame coordinates.
left = info.sawtoothPanelLeft;
bottom = info.sawtoothPanelBottom;
width = info.sawtoothPanelWidth;
height = info.sawtoothPanelHeight;
sawtoothWave.Position = [left bottom width height];

%Now set up the grid layout.
gridLayout = uigridlayout(sawtoothWave, [length(info.waveRowHeight) ...
    length(info.waveColumnWidth)]);
gridLayout.RowHeight = info.waveRowHeight;
gridLayout.ColumnWidth = info.waveColumnWidth;
sawtoothWave.TitlePosition = info.titlePosition;
sawtoothWave.Title = 'Sawtooth Wave';
sawtoothWave.BorderWidth = info.borderWidth;
sawtoothWave.FontWeight = info.fontWeight;
sawtoothWave.FontSize = info.fontSize;

%Set up an amplitude label.
label = 'Amplitude(V) :';
row = 1;
column = 1;
getBangParamLabel(gridLayout, label, row, column);

%Get the amplitude.
row = 1;
column = 3;
position = 7;
getBangParam(gridLayout, amplitude, row, column, position);

%Set up a frequency label.
label = 'Frequency (Hz) : ';
row = 2;
column = 1;
getBangParamLabel(gridLayout, label, row, column);

%Get the frequency.
row = 2;
column = 3;
position = 8;
getBangParam(gridLayout, frequency, row, column, position);

%Set up a offset label.
label = 'Offset (V) : ';
row = 3;
column = 1;
getBangParamLabel(gridLayout, label, row, column);

%Get the offset.
row = 3;
column = 3;
position = 9;
getBangParam(gridLayout, offset, row, column, position);

%Generate the save data button component.
label = "Do Not Save Data To File?";
row = 4;
column = [1 3];
position = 20;
saveDataButton(gridLayout, label, row, column, position);
 
%Generate the save plot component.
label = "Do Not Save Plot To File?";
row = 5;
column = [1 3];
position = 21;
savePlotButton(gridLayout, label, row, column, position);

%Set up a start button.
label = 'Start';
row = 6;
column = [1 3];
position = 18;
frameType = 'Sawtooth';
getStartButton(gridLayout, label, row, column, bangDAQ, info, ...
    position, frameType);

%Set up a stop button.
label = 'Stop';
row = 7;
column = [1 3];
position = 19;
getStopButton(fig, gridLayout, label, row, column, position);

end  %End of the function getSawtoothWave.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function utilities = getUtilities(fig, bangDAQ)

%This function will generate a panel for the user to end the program.

%Set a panel into the original gui.
utilities = uipanel(fig);

%Set up the location of the panel into the original gui.
left = 40;  %The left edge of the panel.
bottom = 3; %The bottom edge of the panel.
width = 1200;  %The width of the panel.
height = 60;   %The height of the panel.
utilities.Position = [left, bottom, width, height];

%Do the panel layout and set the height and width of the rows and columns.
handles.utilitiesGridLayout = uigridlayout(utilities, [1 3]);
handles.utilitiesGridLayout.RowHeight = {40};
handles.utilitiesGridLayout.ColumnWidth = {width - 30};

%Place the close window button into the gui.
label = 'Close Window';
row = 1;
column = [1 2];
handles.quitButton = getQuitButton(handles, label, row, column);

end  %End of the function getUtilities.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function quitButton = getQuitButton(handles, Text, row, column)
%This function will get the handle for the quit button.

quitButton = uibutton(handles.utilitiesGridLayout);
quitButton.Text = Text;
quitButton.FontWeight = 'bold';
quitButton.FontSize = 24;
quitButton.FontColor = [0 0 0];
quitButton.Layout.Row = row;
quitButton.Layout.Column = column;
quitButton.BackgroundColor = [1 1 1];
quitButton.ButtonPushedFcn = {@quitButtonFlag};
end
%End of the function quitButton.m

function quitButtonFlag(arc, event)
%This function closes the program.

%If the user clicks the close window button then close the window.
closereq();
end
%End of the function quitButtonFlag.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function getStopButton(fig, gridLayout, Text, row, column, position)
%This function will generate the stop button.

stopButton = uibutton(gridLayout);
stopButton.Text = Text;
stopButton.FontWeight = 'bold';
stopButton.FontSize = 24;
stopButton.FontColor = [0 0 0];
stopButton.Layout.Row = row;
stopButton.Layout.Column = column;
stopButton.BackgroundColor = [1 0 0];
stopButton.ButtonPushedFcn = {@stopButtonFlag, fig, position};

end  %End of the function getStopButton.m

function stopButtonFlag(src, event, fig, position)
%This function sets the stop and start parameter flags to tell the 
%program to stop.

%First get the handles out of the figure object.
handles = guidata(src);

%Set the stop and start parameters.
handles.params(position) = 0;
handles.params(position + 1) = 1;

%Store the handle structure in the application data of the figure object.
guidata(fig, handles);

end %End of the function stopButtonFlag.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function getStartButton(gridLayout, label, row, column, bangDAQ, info, ...
    position, frameType)

%This function will start the generation of the various wave forms.

startButton = uibutton(gridLayout);
startButton.Text = label;
startButton.FontWeight = 'bold';
startButton.FontSize = 24;
startButton.FontColor = 'k';
startButton.Layout.Row  = row;
startButton.Layout.Column = column;
startButton.BackgroundColor = 'g';
startButton.ButtonPushedFcn = {@startLoopingInputSignal, bangDAQ, info, ...
    position, frameType};

end  %End of the function getStartButton.m

function startLoopingInputSignal(src, event, bangDAQ, info, ...
    position, frameType)

%Loop the generation of the data.
while true
    handles = guidata(src);

    %Get the start and stop flags.
    startLoop = handles.params(position);
    stopLoop = handles.params(position + 1);

    if strcmp(frameType, 'Sine')
        %Generate the sine wave sweep.
        generateWave(handles, bangDAQ, info, frameType)
    end
    if strcmp(frameType, 'Square')
       %Generate the square wave sweep.
        generateWave(handles, bangDAQ, info, frameType);
    end
    if strcmp(frameType, 'Sawtooth')
        %Generate the sawtooth wave sweep.
        generateWave(handles, bangDAQ, info, frameType);
    end
    if strcmp(frameType, 'pulsePair')
        %Generate the pulse pair wave.
        generatePulsePairs(handles, bangDAQ, info, frameType);
    end
    
    %This is needed in order to see the stop interrupt.
%    pause(0.1);  

    %Check to see if the user has asked to stop.  If so we break out of the
    %while loop.
    if stopLoop
        break;
    end  %End of if statement.    

end  %End of the while loop

end  %End of the function startLoopingInputSignal.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function generatePulsePairs(handles, bangDAQ, info, frameType)
%This function will generate the pulse pairs.  It is called by
%getStartButton.

%First generate a figure.
%Set up the figure size and location.
left = info.plotLeft;
bottom = info.plotBottom;
width = info.plotWidth;
height = info.plotHeight;

fig1 = figure();        
fig1.Position = [left bottom width height];

%Set up the data save path.
saveDataPath = info.saveDataPath;
absoluteSavePath = makeBhangmeterDirectory(saveDataPath, frameType);
            
%Set up a plotting directory.        
savePlotPath = info.savePlotPath;
absolutePlotPath = makeBhangmeterDirectory(savePlotPath, frameType);

%Set the handles.params fields to the variable params.
params = handles.params;

%Get the save data and plot flags.
saveDataFlag = params(20);
savePlotFlag = params(21);

%Set the frequency.
frequency = info.sampleRate;

%Generate the pulses.  The variable f corresponds to the first pulse.  The
%variable g corresponds to the second pulse and the variable t corresponds
%to the time values plugged into the Gaussian functions.
[f, g, time] = generatePulses(params, info);

%Generate the final pulse which is the summation of the two individual
%pulses labeled f and g.
pulse = f + g;
outputData = pulse;

%Given the frequency we want to set the sample rate of the data aquisition
%model to be twice that.
bangDAQ.Rate = 2*frequency;

%Write the pulse shape to the NIDAC board.
[inputData, timeData] = readwrite(bangDAQ.s, outputData);

%Make a plot of the data.
generatePulsePairPlot(fig1, time, outputData, params)

%Write the plot to a file
%Set up a plot file name.
if savePlotFlag
    plotFileName = strcat(absolutePlotPath, '\Bhangmeter_', ...
        datestr(now, 'yyyy-mm-dd_HH-MM-SS'), '.png');
    saveas(fig1, plotFileName);
end

%Write the data file if the user requests
if saveDataFlag
    fileName = strcat(absoluteSavePath, '\Bhangmeter_', ...
        datestr(now, 'yyyy-mm-dd_HH-MM-SS'));
    outMatrix = [time, outputData];
    writematrix(outMatrix, fileName);
end

end  %End of the function generatePulsePairs.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [f, g, t] = generatePulses(params, info)
%This function is called by generatePulsePairs and will actually create the
%two pulses from the input parameters.

%Determine the frequency by looking at the sample rate.
frequency = info.sampleRate;

%Get the parameters.
amplitude1 = params(10);
offset1 = params(11);
sigma1 = params(12);
mu1 = params(13);
amplitude2 = params(14);
offset2 = params(15);
sigma2 = params(16);
mu2 = params(17);

%Check to see that the sum of the amplitude and offset are not greater than
%5 Volts.  First check the first pulse parameters.
if amplitude1 > 5.0
    amplitude1 = 5.0;
end

if amplitude1 + offset1 > 5.0
    offset1 = 0  %We remove the offset.
end

%Now check the second pulse parameters.
if amplitude2 > 5.0
    amplitude2 = 5.0;
end

if amplitude2 + offset2 > 5.0
    offset2 = 0  %We remove the offset.
end

%Generate a sequence of values to be used as a time.
t = linspace(0, frequency, 2*frequency)';

%Generate the argument to the two exponents.
e1Arg = -0.5*((t - mu1)/sigma1).^2;
e2Arg = -0.5*((t - mu2)/sigma2).^2;

sqrt2pi = sqrt(2.0*pi);

%Generate the functions.
f = offset1 + amplitude1*(1.0/(sigma1 * sqrt2pi))*exp(e1Arg);
g = offset2 + amplitude2*(1.0/(sigma2 * sqrt2pi))*exp(e2Arg);

end  %End of the function generatePulses.m


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function generatePulsePairPlot(fig1, time, outputData, params)
%This function will plot the pulse pairs.  It is called by
%generatePulsePairs.

%Get the parameters.
amplitude1 = params(10);
offset1 = params(11);
sigma1 = params(12);
mu1 = params(13);
amplitude2 = params(14);
offset2 = params(15);
sigma2 = params(16);
mu2 = params(17);

%Now plot the data.
plot(time, outputData, 'green')
xlim([time(1) time(end)])
title('Voltage versus time')
xlabel('Time (s)')
ylabel('Amplitude (V)')
text(0.75, 3.50, ['A_{1}', ' = ', num2str(amplitude1)])
text(0.75, 3.25, ['\sigma_{1}', ' = ', num2str(sigma1)])
text(0.75, 3.00, ['\mu_{1}', ' = ', num2str(mu1)])
text(0.75, 2.75, ['Y Offset', ' = ', num2str(offset1)])
text(0.75, 2.50, ['A_{2}', ' = ', num2str(amplitude2)])
text(0.75, 2.25, ['\sigma_{2}', ' = ', num2str(sigma2)])
text(0.75, 2.00, ['\mu_{2}', ' = ', num2str(mu2)])
text(0.75, 1.75, ['Y Offset', ' = ', num2str(offset2)])

end  %End of the function generatePulsePairPlot.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function generateWave(handles, bangDAQ, info, frameType)
%This function will generate the sawtooth wave voltage profile.
%This function is called by getStartButton, getLoopingInputSignal.m

%First generate a figure.
%Set up the figure size and location.
left = info.plotLeft;
bottom = info.plotBottom;
width = info.plotWidth;
height = info.plotHeight;

fig1 = figure();        
fig1.Position = [left bottom width height];

%Set up the data save path.
saveDataPath = info.saveDataPath;
absoluteSavePath = makeBhangmeterDirectory(saveDataPath, frameType);
            
%Set up a plotting directory.        
savePlotPath = info.savePlotPath;
absolutePlotPath = makeBhangmeterDirectory(savePlotPath, frameType);

%Use the frame type value to determine the parameter array indices.
if strcmp(frameType, 'Sine')
    amplitudeIndex = 1;
    frequencyIndex = 2;
    offsetIndex = 3;
end

if strcmp(frameType, 'Square')
    amplitudeIndex = 4;
    frequencyIndex = 5;
    offsetIndex = 6;
end

if strcmp(frameType, 'Sawtooth')
    amplitudeIndex = 7;
    frequencyIndex = 8;
    offsetIndex = 9;
end


%Lets make the parameters more understandable.
amplitude = handles.params(amplitudeIndex);  %Units are in Volts.
frequency = handles.params(frequencyIndex);  %Units are in hz.
offset = handles.params(offsetIndex); %Units are in volts.

%Get the save data and plot flags.
saveDataFlag = handles.params(20);
savePlotFlag = handles.params(21);

%Check to see that the sum of the amplitude and offset are not greater than
%5 Volts.
if amplitude > 5.0
    amplitude = 5.0;
end

if amplitude + offset > 5.0
    offset = 0  %We remove the offset.
end

%Now generate a square wave.
g = linspace(0, frequency*pi, 2*frequency)';

%Use the frame type to determine the kind of function to generate for the
%output to the NiDAQ box.
if strcmp(frameType, 'Sine')
    pulse = amplitude*sin(g) + offset;
end

if strcmp(frameType, 'Square')
    pulse = amplitude*square(g) + offset;
end

if strcmp(frameType, 'Sawtooth')
    pulse = amplitude*sawtooth(g) + offset;
end

outputData = pulse;
time = 1 : 2*frequency;

%Given the frequency we want to set the sample rate of the data aquisition
%model to be twice that.
bangDAQ.Rate = 2*frequency;

%Write the profile to the DAQ.  OutputData is data that is output to the
%bhangmeter. InputData is data that is read from bhangmeter.  At this time,
%we are not actually getting any input data from the bhangmeter.  I have
%put this in there on the chance that we will one day use it.  Its wave
%form should probably be just random noise.
[inputData, timeData] = readwrite(bangDAQ.s, outputData);   

%Make plots of the outputs sent to the bhangmeter.
generateBhangmeterPlots(fig1, time, outputData, amplitude, ...
    frequency, offset)

%Write the plot to a file
%Set up a plot file name.
if savePlotFlag
    plotFileName = strcat(absolutePlotPath, '\Bhangmeter_', ...
        datestr(now, 'yyyy-mm-dd_HH-MM-SS'), '.png');
    saveas(fig1, plotFileName);
end

%Write the data file if the user requests
if saveDataFlag
    fileName = strcat(absoluteSavePath, '\Bhangmeter_', ...
        datestr(now, 'yyyy-mm-dd_HH-MM-SS'));
    outMatrix = [time; outputData']';
    writematrix(outMatrix, fileName);
end

end  %End of the function generateWave.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function generateBhangmeterPlots(fig1, time, outputData, amplitude, ...
    frequency, offset)

%Generate a plot of the output voltage as a function of time.

amplitudeStr = ['Amplitude : ', num2str(amplitude), ' Volts'];
frequencyStr = ['Frequency : ', num2str(frequency), ' Hz'];
offsetStr = ['Offset : ', num2str(offset), ' Volts'];

timeStartIndex = 1000;
timeEndIndex = 1500;
t = time(timeStartIndex : timeEndIndex);
voltage = outputData(timeStartIndex : timeEndIndex);

plot(t, voltage, 'r') 
title('Plot of Voltage Sent to Bhangmeter Versus Time')
xlim([t(1) t(end)])
xlabel('Time (ms)')
ylabel('Bhangmeter Signal (V)')
ylim([-1.2*amplitude + offset 1.2*amplitude + offset])
text('Units', 'Normalized', 'Position', [0.6, 0.95], 'string', ...
    amplitudeStr, 'FontSize', 11)
text('Units', 'Normalized', 'Position', [0.6, 0.85], 'string', ...
    frequencyStr, 'FontSize', 11)
text('Units', 'Normalized', 'Position', [0.6, 0.75], 'string', ...
    offsetStr, 'FontSize', 11)

end  %End of the function generateBhangmeterPlots.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function getBangParamLabel(gridLayout, name, row, column)
%This function will place the parameter label onto the frame.

paramLabel = uilabel(gridLayout);
paramLabel.Text = name;
paramLabel.FontWeight = 'bold';
paramLabel.FontSize = 16;
paramLabel.FontColor = 'k';
paramLabel.Layout.Row = row;
paramLabel.Layout.Column = column;

end  %End of the function getParamLabel.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function getBangParam(gridLayout, initialValue, row, column, position)
%This function will get the paramater from the user and then change it.

param = uieditfield(gridLayout, 'numeric');
param.Value = initialValue;
param.FontSize = 16;
param.FontWeight = 'bold';
param.Layout.Row = row;
param.Layout.Column = column;
param.ValueChangedFcn = {@changeParam, position};

end  %End of the function getParam.m

function changeParam(src, event, position)

%Get the data out of the applicatin data of the figure object.
handles = guidata(src);

%Now put the new value into the appropriate handle structure.
handles.params(position) = event.Value;

%Store the handle structure in the application data of the figure object.
guidata(src, handles);

end %End of the function changeParam.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function saveDataButton(gridLayout, Text, row, column, position)
%This function will generate save data button.
   
saveDataButton = uicheckbox(gridLayout);
saveDataButton.Text = Text;
saveDataButton.FontWeight = "bold";
saveDataButton.FontSize = 16;
saveDataButton.FontColor = [0 0 0];
saveDataButton.Layout.Row = row;
saveDataButton.Layout.Column = column;
saveDataButton.ValueChangedFcn = {@saveDataButtonFlag2, position};

end %End of the function saveDataButton2.m

function saveDataButtonFlag2(src, event, position)
%Here we will just send the controller the quit command.    
%Get the data out of the application data of the figure object.
handles = guidata(src);

if handles.params(position) == 1  %saveDataButtonFlag is set to 1.
    handles.params(position) = 0;
end  %End  of if statement.
if handles.params(position) == 0  %SaveDataButtonFlag is set to 0.
    handles.params(position) = 1;
end %End of if statement.

end  %End of the function saveDataButtonFlag.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function savePlotButton(gridLayout, Text, row, column, position)
%This function will set the savePlotButton flag.
        
savePlotButton = uicheckbox(gridLayout);
savePlotButton.Text = Text;
savePlotButton.FontWeight = "bold";
savePlotButton.FontSize = 16;
savePlotButton.FontColor = [0 0 0];
savePlotButton.Layout.Row = row;
savePlotButton.Layout.Column = column;
savePlotButton.ValueChangedFcn = {@savePlotButtonFlag, position};

end %End of the function savePlotButton.m

function savePlotButtonFlag(src, event, position)
%Here we will just send the controller the quit command.

%Get the data out of the application data of the figure object.
handles = guidata(src);

if handles.params(position) == 1  %savePlotButtonFlag is set to 1.
    handles.savePlotButton.UserData = 0;
end  %End of if statement.

if handles.params(position) == 0 %savePlotButtonFlag is set to 0.
    handles.params(position) = 1;    
end %End of if statement.

end  %End of the function savePlotButtonFlag.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function absolutePath = makeBhangmeterDirectory(path, waveForm)

%This function will input a generic path and then create a new
%subdirectory underneath it, if it doesn't already exist.  The function
%returns the absolute path of the original path with the new directory    
%appended onto it.
    
%Set up the save directory. A new directory will be made for every day.
directoryDate = datestr(now, 'mm-dd-yyyy');

%Generate an absolute save path.
absolutePath = strcat(path, directoryDate, '\', waveForm, '\');
    
%Generate a structure holding information about the new directory.
nameDir = dir(absolutePath);

%Check to see if dateStr exists as a directory.  If the length of the
%nameDir structure is zero then the directory does not exist.
if (isempty(nameDir))
    mkdir(absolutePath);    
end  %End of the if statement - if(isempty(nameDir))

end  %End of the function makeBhangmeterDirectory.m